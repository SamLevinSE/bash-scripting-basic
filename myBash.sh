#!/bin/bash

name=Sam
age=32
tittle="intern and a computing student"


echo "Hello, I'm $name $age. I'm an $tittle"


#Adding attribute to variable:
declare -i age=32
# A read only variable:
# declare -r name=Sam
# make it lower case:
# declare -l lower="Lower"
# make it lower case:
# declare -u upper="upper"
# echo "$name $age, $upper $lower"

workingDir=$(pwd)
echo "The working directory is >>> $workingDir"

sum=$((age*2+10))
echo "Total age: $sum"

# Returns 1 for false and 0 for true
[[ "cat" == "dog" ]]
echo $?

# Returns 1 for false and 0 for true
[[ $age -eq 32 ]]
echo $?

echo ${#name}

# Just part of a text
text="helloworldthisisme"
world=${text:5:5} 
me=${text: -2} 
this=${text: -8:4}
echo "world: $world, this: $this, me: $me"

# Changing a part of string with something else:
myList="apple banana banana cherry"
echo ${myList/banana/durian}
# For changing all the bananas, we use // instead of one /
echo ${myList//banana/durian}
echo $myList
# For finding anything which starts with some char
echo ${myList/b*a/orange}

printf "Name:\t%s\nID:\t%04d\n" "Sam" "21"

today=$(date +"%d-%m-%Y")
time=$(date +"%H:%M:%S")
printf -v toPrint "Current User:\t%s\nDate:\t\t%s @ %s\n" $USER $today $time
echo "$toPrint"

#empty array
myArray=()
myOtherArray=("hi" "hey" "hello")
myArray[0]="hej"
echo ${myOtherArray[2]}
#print all the elements in the array
echo ${myOtherArray[@]}
#bash version 4 (Doesn't work with version 3)
#declare -A myDict
#myDict[color]="light blue"
#myDict["the object"]=table
#echo ${myDict["the object"]} is ${myDict[color]}

#greater than operator by itself to zero out a file, getting rid of anything that's inside it
> test.txt
cat test.txt
#write into a file. This command will create the file if it not existl.
echo "First line of text" > test.txt
cat test.txt
#append a text at the end of the file
echo "Second line of text" >> test.txt
cat test.txt
#reading a file line by line with while loop
count=1
while read file; do
    echo "$count - $file"
    ((count++))
done < test.txt
#multiline text line
cat <<- EndOfText
        This is
        a multiline
        string.
        ...
EndOfText

#creating a log file and appending some info at the end of it
freespace=$(df -h / | grep -E "\/$" | awk '{print $4}')
logdate=$(date +"%d%m%Y")
logfile="$logdate"_report.log
echo "Quick system report for $HOSTNAME"
printf "\tSystem type:\t%s\n" $MACHTYPE
printf "\tBash Version:\t%s\n" $BASH_VERSION
printf "\tFree space:\t%s\n" $freespace
printf "\tFiles in dir:\t%s\n" $(ls |wc -l)
printf "\tGenerated on:\t%s\n" $(date +"%d/%m/%Y")
echo "A summery of this info has been saved to $logfile"
cat << EndOfText > $logfile
    This report was automatically generated by Bash script.
    It contains a brief summary of some system information.
EndOfText
echo "Quick system report for $HOSTNAME"
printf "\tSystem type:\t%s\n" $MACHTYPE >> $logfile
printf "\tBash Version:\t%s\n" $BASH_VERSION >> $logfile
printf "\tFree space:\t%s\n" $freespace >> $logfile
printf "\tFiles in dir:\t%s\n" $(ls |wc -l) >> $logfile
printf "\tGenerated on:\t%s\n" $logdate >> $logfile

#If statement
if [ $age -eq 32 ];then
    echo "age: $age"
elif [ ]$age -le 32 ];then
    echo "You are younger than $age"
else
    echo "You are older than $age"
fi

#While loop
index=0
while [[ index -le 10 ]]; do
    echo i:$index
    ((index++))
done

#For loop
for i in 1 2 3 4 5;do
    echo $i
done
for i in {10..0};do #range
    echo $i
done
for (( i=0; i<10; i++ ));do #Java style
    echo $i
done
#Loop through an array
arr=("Hej" "Hallo" "Hola")
for i in ${arr[@]};do
echo $i
done
for i in $(ls);do
    echo $i
done

#Case statement
var="dog"
case $var in
    cat) echo "It is a cat";;
    dog|puppy) echo "It is a dog or a puppy";;
    *) echo "Not matched!";;
esac

#Functions
function greetings {
    echo "Hello $1, greetings from $2"
}
greetings Sam yourself
greetings visitor Sam
function numberthings {
    index=1
    for file in $@; do # $@ means all the arrgs
    echo $index: $file
        ((index++))
    done
}
numberthings $(ls)
numberthings blue black red pink

#Arguments
echo $@ #this will print all the args which user types after the running function
for args in $@;do
    echo $args
done
echo "There was $# args" # $# Returns the number of args

#Flags
while getopts :u:p: option;do
    case $option in
        u) user=$OPTARG;;
        p) pass=$OPTARG;;
        ?) echo "Unkonwn flag";;
    esac
done
echo "User: $user | Pass: $pass"

#Getting input from user
echo "What is your name?"
read name
echo "What is your password?"
read -s pass # -s means, silent; it doesnt show the password
read -p "What is your favorit animal? " animal #One line Q A
echo "Welcome $name! Oh I like your choice of animal! I think $animal are so cool!"

#Select input
select car in "Volvo" "BMW";do
    echo "You selected $car"
    break
done
select option in "car" "house" "job" "quit";do
    case $option in
        car) echo "Cars are good for going aroung";;
        house) echo "Having a house is a dream for so many...";;
        job) echo "Working in a good environment is important";;
        quit) break;;
        *) echo "Don't have any opinion about this";;
    esac
done

#Valudation of inputs
if [ $# -lt 3 ];then
    cat <<- EOM
    This command requires three arguments:
    UserName, userId, and fav animal.
    EOM
else
    echo "Username: $1"
    echo "UserId: $2"
    echo "Fav Animal: $3"
fi
